const http2 = require('http2');
const path = require('path');
const fs = require('fs');
const mime = require("mime");
const options = {
  key: fs.readFileSync(path.resolve(__dirname, './localhost.key')),
  cert: fs.readFileSync(path.resolve(__dirname, './localhost.crt'))
};

// read and send file content in the stream
const sendFile = (stream, fileName) => {
  const fd = fs.openSync(fileName, "r");
  const stat = fs.fstatSync(fd);
  const headers = {
    "content-length": stat.size,
    "last-modified": stat.mtime.toUTCString(),
    "content-type": mime.getType(fileName)
  };
  stream.respondWithFD(fd, headers);
  stream.on("close", () => {
    console.log("closing file", fileName);
    fs.closeSync(fd);
  });
  stream.end();
};

const pushFile = (stream, path, fileName) => {
  stream.pushStream({ ":path": path }, (err, pushStream) => {
    if (err) {
      throw err;
    }
    sendFile(pushStream, fileName);
  });
};



const http2Handlers = (req, res) => {
  console.log(req.url);

    // push style.css
    pushFile(res.stream,  "/stylesheets/style.css", __dirname + "/../public/stylesheets/style.css");

    // push all files in scripts directory
    // const files = fs.readdirSync(__dirname + "/scripts");
    // for (let i = 0; i < files.length; i++) {
    //   const fileName = __dirname + "/scripts/" + files[i];
    //   const path = "/scripts/" + files[i];
    //   pushFile(res.stream, path, fileName);
    // }
    //
    // // push all files in images directory
    // const imageFiles = fs.readdirSync(__dirname + "/images");
    // for (let i = 0; i < imageFiles.length; i++) {
    //   const fileName = __dirname + "/images/" + imageFiles[i];
    //   const path = "/images/" + imageFiles[i];
    //   pushFile(res.stream, path, fileName);
    // }
    //
    // // lastly send index.html file
    sendFile(res.stream, __dirname + "/../public/index.html");

};


// https is necessary otherwise browsers will not
// be able to connect
const server = http2.createSecureServer(options, http2Handlers);
server.listen(3334);